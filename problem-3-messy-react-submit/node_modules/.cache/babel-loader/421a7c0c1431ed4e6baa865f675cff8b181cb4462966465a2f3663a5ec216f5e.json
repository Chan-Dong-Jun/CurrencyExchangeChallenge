{"ast":null,"code":"var _jsxFileName = \"C:\\\\temp\\\\messy-react-submit\\\\messy-react-submit\\\\src\\\\switcheo\\\\pages\\\\WalletPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { constants } from '../constants/switcheo-constants.tsx';\nimport { useWalletBalances } from '../hooks/useWalletBalances.tsx';\nimport { Datasource } from '../apis/Datasource.tsx';\nimport { WalletRow } from '../components/WalletRow.tsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const WalletPage = props => {\n  _s();\n  const {\n    ...rest\n  } = props;\n  const balances = useWalletBalances();\n  const [prices, setPrices] = useState([]);\n  useEffect(() => {\n    const datasource = new Datasource(constants.url); // use constants instead of env \n    datasource.getPrices().then(prices => {\n      setPrices(prices);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  const getPriority = blockchain => {\n    switch (blockchain) {\n      case \"Osmosis\":\n        return 100;\n      case \"Ethereum\":\n        return 50;\n      case \"Arbitrum\":\n        return 30;\n      case \"Zilliqa\":\n        return 20;\n      case \"Neo\":\n        return 20;\n      default:\n        return -99;\n    }\n  };\n  const sortedBalances = useMemo(() => {\n    // Formatted or not Formatted ??\n    const balanceRes = balances.filter(balance => {\n      const balancePriority = getPriority(balance.blockchain);\n      if (balancePriority > -99) {\n        if (balance.amount >= 0) {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    }).sort((lhs, rhs) => {\n      const leftPriority = getPriority(lhs.blockchain);\n      const rightPriority = getPriority(rhs.blockchain);\n      if (leftPriority >= rightPriority) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n    return balanceRes;\n  }, [balances, prices]);\n  const formattedBalances = sortedBalances.map(balance => {\n    return {\n      ...balance,\n      formatted: balance.amount.toFixed(2) // how many decimal points ??\n    };\n  });\n  const rows = formattedBalances.map((balance, index) => {\n    var _prices$find;\n    const usdValue = ((_prices$find = prices.find(el => el.currency === balance.currency)) === null || _prices$find === void 0 ? void 0 : _prices$find.price) * balance.amount;\n    return /*#__PURE__*/_jsxDEV(WalletRow, {\n      className: balance.blockchain,\n      currency: balance.currency,\n      blockchain: balance.blockchain,\n      amount: balance.amount,\n      usdValue: usdValue,\n      formattedAmount: balance.formatted\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '3rem',\n        border: '0.2rem solid slateblue'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          display: 'inline-block',\n          padding: '1rem  10rem 3rem',\n          color: 'slateblue'\n        },\n        children: \"Welcome to Coin Exchange\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ...rest,\n        children: rows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(WalletPage, \"maN2lXs6oYNomPGXr1UaboJ+71M=\", false, function () {\n  return [useWalletBalances];\n});\n_c = WalletPage;\nvar _c;\n$RefreshReg$(_c, \"WalletPage\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","constants","useWalletBalances","Datasource","WalletRow","jsxDEV","_jsxDEV","Fragment","_Fragment","WalletPage","props","_s","rest","balances","prices","setPrices","datasource","url","getPrices","then","catch","error","console","log","getPriority","blockchain","sortedBalances","balanceRes","filter","balance","balancePriority","amount","sort","lhs","rhs","leftPriority","rightPriority","formattedBalances","map","formatted","toFixed","rows","index","_prices$find","usdValue","find","el","currency","price","className","formattedAmount","fileName","_jsxFileName","lineNumber","columnNumber","children","style","padding","border","display","color","_c","$RefreshReg$"],"sources":["C:/temp/messy-react-submit/messy-react-submit/src/switcheo/pages/WalletPage.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\r\nimport { constants } from '../constants/switcheo-constants.tsx';\r\nimport { useWalletBalances } from '../hooks/useWalletBalances.tsx';\r\nimport { Blockchain, FormattedWalletBalance, WalletBalance, Price, Props } from \"../types/switcheo-types.tsx\";\r\nimport { Datasource } from '../apis/Datasource.tsx';\r\nimport { WalletRow } from '../components/WalletRow.tsx';\r\n\r\nexport const WalletPage: React.FC<Props> = (props: Props): JSX.Element => {\r\n  const { ...rest } = props;\r\n  const balances: WalletBalance[] = useWalletBalances();\r\n  const [prices, setPrices] = useState<Price[]>([]);\r\n\r\n  useEffect(() => {\r\n    const datasource = new Datasource(constants.url);  // use constants instead of env \r\n    datasource\r\n      .getPrices()\r\n      .then((prices) => {\r\n        setPrices(prices);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  const getPriority = (blockchain: Blockchain): number => {\r\n    switch (blockchain) {\r\n      case \"Osmosis\":\r\n        return 100;\r\n      case \"Ethereum\":\r\n        return 50;\r\n      case \"Arbitrum\":\r\n        return 30;\r\n      case \"Zilliqa\":\r\n        return 20;\r\n      case \"Neo\":\r\n        return 20;\r\n      default:\r\n        return -99;\r\n    }\r\n  };\r\n\r\n  const sortedBalances: WalletBalance[] = useMemo(() => { // Formatted or not Formatted ??\r\n    const balanceRes = balances.filter((balance: WalletBalance) => {\r\n      const balancePriority = getPriority(balance.blockchain);\r\n      if (balancePriority > -99) {\r\n        if (balance.amount >= 0) {\r\n          return true;\r\n\r\n        }\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    })\r\n      .sort((lhs: WalletBalance, rhs: WalletBalance) => {\r\n        const leftPriority = getPriority(lhs.blockchain);\r\n        const rightPriority = getPriority(rhs.blockchain);\r\n        if (leftPriority >= rightPriority) {\r\n          return -1;\r\n        } else {\r\n          return 1;\r\n        }\r\n      });\r\n\r\n    return balanceRes\r\n  }, [balances, prices]);\r\n\r\n  const formattedBalances: FormattedWalletBalance[] = sortedBalances.map((balance: WalletBalance) => {\r\n    return {\r\n      ...balance,\r\n      formatted: balance.amount.toFixed(2),  // how many decimal points ??\r\n    };\r\n  });\r\n\r\n  const rows = formattedBalances.map(\r\n    (balance: FormattedWalletBalance, index: number): JSX.Element => {\r\n\r\n      const usdValue = prices.find(\r\n        el => el.currency === balance.currency\r\n      )?.price as number * balance.amount;\r\n\r\n      return (\r\n        <WalletRow\r\n          className={balance.blockchain}\r\n          key={index}\r\n          currency={balance.currency}\r\n          blockchain={balance.blockchain as string}\r\n          amount={balance.amount}\r\n          usdValue={usdValue}\r\n          formattedAmount={balance.formatted}\r\n        />\r\n      );\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ padding: '3rem', border: '0.2rem solid slateblue' }}>\r\n        <label style={{ display: 'inline-block', padding: '1rem  10rem 3rem', color: 'slateblue' }}>Welcome to Coin Exchange</label>\r\n        <div {...rest}>\r\n          {rows}\r\n        </div>\r\n      </div >\r\n    </>\r\n  )\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}